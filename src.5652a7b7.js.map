{"version":3,"sources":["Utilities.ts","ShaderProgram.ts","BufferObject.ts","OBJLoader/Face.ts","OBJLoader/Normal.ts","OBJLoader/TextureVertex.ts","OBJLoader/Vertex.ts","OBJLoader/Obj.ts","../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/mat2.js","../node_modules/gl-matrix/esm/mat2d.js","../node_modules/gl-matrix/esm/mat3.js","../node_modules/gl-matrix/esm/mat4.js","../node_modules/gl-matrix/esm/vec3.js","../node_modules/gl-matrix/esm/vec4.js","../node_modules/gl-matrix/esm/quat.js","../node_modules/gl-matrix/esm/quat2.js","../node_modules/gl-matrix/esm/vec2.js","../node_modules/gl-matrix/esm/index.js","MathUtilities.ts","Texture.ts","index.ts"],"names":["EPSILON","exports","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","hypot","y","i","arguments","length","sqrt","glMatrix","_interopRequireWildcard","require","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","set","create","out","clone","copy","identity","fromValues","m00","m01","m10","m11","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","s","sin","c","cos","scale","v","v0","v1","fromRotation","fromScaling","str","frob","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","mul","sub","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspectiveNO","fovy","aspect","f","tan","Infinity","perspective","perspectiveZO","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","orthoNO","lr","bt","ortho","orthoZO","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","mag","cosine","acos","zero","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","l","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","mat3","vec3","vec4","setAxisAngle","getAxisAngle","out_axis","getAngle","dotproduct","calculateW","exp","et","ln","atan2","log","pow","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","view","quat","mat4","dq","w1","fromRotationTranslationValues","outer","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC","mat2","mat2d","quat2","vec2"],"mappings":"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","file":"src.5652a7b7.js","sourceRoot":"..\\src","sourcesContent":["export function loadFile(filePath: string) {\r\n    var result = null;\r\n    var xmlhttp = new XMLHttpRequest();\r\n    xmlhttp.open(\"GET\", filePath, false);\r\n    xmlhttp.send();\r\n    if (xmlhttp.status == 200) {\r\n        result = xmlhttp.responseText;\r\n    }\r\n    return result;\r\n}","import { mat4 } from \"gl-matrix\";\r\nimport { gl } from \".\";\r\nimport { loadFile } from \"./Utilities\";\r\n\r\nexport class ShaderProgram {\r\n    public program: WebGLProgram;\r\n\r\n    public constructor(vertexShaderFile: string, fragmentShaderFile: string) {\r\n        const vertexShader = this.createShader(gl.VERTEX_SHADER, loadFile(vertexShaderFile));\r\n        const fragmentShader = this.createShader(gl.FRAGMENT_SHADER, loadFile(fragmentShaderFile));\r\n\r\n        this.program = gl.createProgram();\r\n\r\n        gl.attachShader(this.program, vertexShader);\r\n        gl.attachShader(this.program, fragmentShader);\r\n        gl.linkProgram(this.program);\r\n\r\n        gl.deleteShader(vertexShader);\r\n        gl.deleteShader(fragmentShader);\r\n\r\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\r\n            const log = gl.getProgramInfoLog(this.program);\r\n            this.delete();\r\n            throw new Error(`Failed to link program. Log: ${log}`);\r\n        }\r\n    }\r\n\r\n    private createShader(shaderType: number, shaderSource: string) {\r\n        const shader = gl.createShader(shaderType);\r\n\r\n        gl.shaderSource(shader, shaderSource);\r\n\r\n        gl.compileShader(shader);\r\n\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            const log = gl.getShaderInfoLog(shader);\r\n\r\n            gl.deleteShader(shader);\r\n            throw new Error(`Could not compile shader type: '${shaderType}'. Log: ${log}`);\r\n            return null;\r\n        }\r\n\r\n        return shader;\r\n    }\r\n\r\n    public use() {\r\n        gl.useProgram(this.program);\r\n    }\r\n\r\n    public unuse() {\r\n        gl.useProgram(null);\r\n    }\r\n\r\n    public delete() {\r\n        gl.deleteProgram(this.program);\r\n    }\r\n\r\n    public setMatrix4fv(uniformName: string, matrix: mat4) {\r\n        this.use();\r\n        gl.uniformMatrix4fv(gl.getUniformLocation(this.program, uniformName), false, matrix, 0, 0);\r\n        this.unuse();\r\n    }\r\n\r\n    public setInt(uniformName: string, value: number) {\r\n        this.use();\r\n        gl.uniform1i(gl.getUniformLocation(this.program, uniformName), value);\r\n        this.unuse();\r\n    }\r\n\r\n    public setFloat(uniformName: string, value: number) {\r\n        this.use();\r\n        gl.uniform1f(gl.getUniformLocation(this.program, uniformName), value);\r\n        this.unuse();\r\n    }\r\n}","import { gl } from \".\";\r\n\r\nexport class BufferObject {\r\n    public readonly bufferType: number;\r\n\r\n    public get buffer(){\r\n        return this._buffer;\r\n    }\r\n\r\n    private _buffer: WebGLBuffer;\r\n\r\n    public constructor(bufferType: number) {\r\n        this.bufferType = bufferType;\r\n        this.recreate();\r\n    }\r\n\r\n    public setData(data: AllowSharedBufferSource, usage: number) {\r\n        if (!this._buffer) return this;\r\n\r\n        this.bind();\r\n\r\n        gl.bufferData(this.bufferType, data, usage);\r\n\r\n        this.unbind();\r\n\r\n        return this;\r\n    }\r\n\r\n    public bind() {\r\n        if (!this._buffer) return this;\r\n\r\n        gl.bindBuffer(this.bufferType, this._buffer);\r\n\r\n        return this;\r\n    }\r\n\r\n    public unbind() {\r\n        if (!this._buffer) return this;\r\n\r\n        gl.bindBuffer(this.bufferType, null);\r\n\r\n        return this;\r\n    }\r\n\r\n    public recreate() {\r\n        if (this._buffer) return this;\r\n\r\n        this._buffer = gl.createBuffer();\r\n\r\n        return this;\r\n    }\r\n\r\n    public delete() {\r\n        if (!this._buffer) return;\r\n\r\n        gl.deleteBuffer(this._buffer);\r\n        this._buffer = null;\r\n    }\r\n}","import { IType } from \"./IType\";\r\n\r\nconst MinimumDataLength = 4;\r\nconst Prefix = \"f\";\r\n\r\nexport class Face implements IType {\r\n    public UseMtl: string;\r\n    public VertexIndexList: number[];\r\n    public TextureVertexIndexList: number[];\r\n    public NormalVertexIndexList: number[];\r\n\r\n    loadFromStringArray(data: string[]): void {\r\n        if (data.length < MinimumDataLength)\r\n            throw new Error(\"Input array must be of minimum length \" + MinimumDataLength);\r\n\r\n        if (data[0].toLowerCase() !== Prefix)\r\n            throw new Error(\"Data prefix must be '\" + Prefix + \"'\");\r\n\r\n        const vcount = data.length - 1;\r\n        this.VertexIndexList = [];\r\n        this.TextureVertexIndexList = [];\r\n        this.NormalVertexIndexList = [];\r\n\r\n        let success = false;\r\n\r\n        for (let i = 0; i < vcount; i++) {\r\n            const parts = data[i + 1].split('/');\r\n\r\n            let vindex = Number(parts[0]);\r\n            success = !isNaN(vindex);\r\n            if (!success) throw new Error(\"Could not parse parameter as int\");\r\n\r\n            this.VertexIndexList.push(vindex);\r\n\r\n            let temp = 0;\r\n\r\n            if (parts.length >= 2) {\r\n                vindex = Number(parts[1]);\r\n                success = !isNaN(vindex);\r\n                if (success) {\r\n                    temp = vindex;\r\n                }\r\n            }\r\n            this.TextureVertexIndexList.push(temp);\r\n\r\n            temp = 0;\r\n\r\n            if(parts.length >= 3){\r\n                vindex = Number(parts[2]);\r\n                success = !isNaN(vindex);\r\n                if (success) {\r\n                    temp = vindex;\r\n                }\r\n            }\r\n\r\n            this.NormalVertexIndexList.push(temp);\r\n        }\r\n    }\r\n\r\n}","import { IType } from \"./IType\";\r\n\r\nconst MinimumDataLength = 4;\r\nconst Prefix = \"vn\";\r\n\r\nexport class Normal implements IType{\r\n    public x: number;\r\n    public y: number;\r\n    public z: number;\r\n\r\n    public Index: number;\r\n\r\n    loadFromStringArray(data: string[]): void {\r\n        if (data.length < MinimumDataLength)\r\n            throw new Error(\"Input array must be of minimum length \" + MinimumDataLength);\r\n\r\n        if (data[0].toLowerCase() !== Prefix)\r\n            throw new Error(\"Data prefix must be '\" + Prefix + \"'\");\r\n\r\n        let success = false;\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n        let z = 0;\r\n\r\n        x = Number(data[1]);\r\n        success = !isNaN(x)\r\n        if (!success)\r\n            throw new Error(\"Could not parse X parameter as double\");\r\n\r\n        y = Number(data[2]);\r\n        success = !isNaN(y)\r\n        if (!success)\r\n            throw new Error(\"Could not parse Y parameter as double\");\r\n        \r\n        z = Number(data[3]);\r\n        success = !isNaN(z)\r\n        if (!success)\r\n            throw new Error(\"Could not parse Z parameter as double\");\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n}","import { IType } from \"./IType\";\r\n\r\nconst MinimumDataLength = 3;\r\nconst Prefix = \"vt\";\r\n\r\nexport class TextureVertex implements IType {\r\n    public x: number;\r\n    public y: number;\r\n\r\n    public Index: number;\r\n\r\n    loadFromStringArray(data: string[]): void {\r\n        if (data.length < MinimumDataLength)\r\n            throw new Error(\"Input array must be of minimum length \" + MinimumDataLength);\r\n\r\n        if (data[0].toLowerCase() !== Prefix)\r\n            throw new Error(\"Data prefix must be '\" + Prefix + \"'\");\r\n\r\n        let success = false;\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        x = Number(data[1]);\r\n        success = !isNaN(x)\r\n        if (!success)\r\n            throw new Error(\"Could not parse X parameter as double\");\r\n\r\n        y = Number(data[2]);\r\n        success = !isNaN(y)\r\n        if (!success)\r\n            throw new Error(\"Could not parse Y parameter as double\");\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n}","import { IType } from \"./IType\";\r\n\r\nconst MinimumDataLength = 4;\r\nconst Prefix = \"v\";\r\n\r\nexport class Vertex implements IType {\r\n    public x: number;\r\n    public y: number;\r\n    public z: number;\r\n\r\n    public Index: number;\r\n\r\n    loadFromStringArray(data: string[]): void {\r\n        if (data.length < MinimumDataLength)\r\n            throw new Error(\"Input array must be of minimum length \" + MinimumDataLength);\r\n\r\n        if (data[0].toLowerCase() !== Prefix)\r\n            throw new Error(\"Data prefix must be '\" + Prefix + \"'\");\r\n\r\n        let success = false;\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n        let z = 0;\r\n\r\n        x = Number(data[1]);\r\n        success = !isNaN(x)\r\n        if (!success)\r\n            throw new Error(\"Could not parse X parameter as double\");\r\n\r\n        y = Number(data[2]);\r\n        success = !isNaN(y)\r\n        if (!success)\r\n            throw new Error(\"Could not parse Y parameter as double\");\r\n        \r\n        z = Number(data[3]);\r\n        success = !isNaN(z)\r\n        if (!success)\r\n            throw new Error(\"Could not parse Z parameter as double\");\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n\r\n}","import { loadFile } from \"../Utilities\";\r\nimport { Extent } from \"./Extent\";\r\nimport { Face } from \"./Face\";\r\nimport { Normal } from \"./Normal\";\r\nimport { TextureVertex } from \"./TextureVertex\";\r\nimport { Vertex } from \"./Vertex\";\r\n\r\nclass FaceData {\r\n    public vertexA: Vertex;\r\n    public vertexB: Vertex;\r\n    public vertexC: Vertex;\r\n    public normalA: Normal;\r\n    public normalB: Normal;\r\n    public normalC: Normal;\r\n    public textureA: TextureVertex;\r\n    public textureB: TextureVertex;\r\n    public textureC: TextureVertex;\r\n}\r\n\r\nexport class Obj {\r\n    public vertexList: Vertex[];\r\n    public faceList: Face[];\r\n    public textureList: TextureVertex[];\r\n    public normalList: Normal[];\r\n\r\n    public vertices: number[];\r\n    public uvs: number[];\r\n    public normals: number[];\r\n    public indices: number[];\r\n\r\n    public size: Extent;\r\n\r\n    public useMtl: string;\r\n    public mtl: string;\r\n\r\n    public constructor() {\r\n        this.vertexList = [];\r\n        this.faceList = [];\r\n        this.textureList = [];\r\n        this.normalList = [];\r\n    }\r\n\r\n    public loadObjFile(path: string) {\r\n        const file = loadFile(path);\r\n        this.loadObj(file.split(\"\\n\"));\r\n    }\r\n\r\n    public loadObj(data: string[]) {\r\n        data.forEach(line => {\r\n            this.processLine(line);\r\n        });\r\n\r\n        {\r\n\r\n            const indices = this.facesToVertexIndices();\r\n            const newArray: Vertex[] = [];\r\n\r\n            indices.forEach(i => {\r\n                newArray.push(this.vertexList[i]);\r\n            });\r\n\r\n            this.vertexList = newArray;\r\n        }\r\n\r\n        {\r\n\r\n            const indices = this.facesToNormalIndices();\r\n            const newArray: Normal[] = [];\r\n\r\n            indices.forEach(i => {\r\n                newArray.push(this.normalList[i]);\r\n            });\r\n\r\n            this.normalList = newArray;\r\n        }\r\n\r\n        {\r\n\r\n            const indices = this.facesToTextureIndices();\r\n            const newArray: TextureVertex[] = [];\r\n\r\n            indices.forEach(i => {\r\n                newArray.push(this.textureList[i]);\r\n            });\r\n\r\n            this.textureList = newArray;\r\n        }\r\n\r\n        this.indices = [];\r\n        this.vertices = [];\r\n        this.normals = [];\r\n        this.uvs = [];\r\n\r\n        interface Vec2 {\r\n            x: number;\r\n            y: number;\r\n        }\r\n\r\n        interface Vec3 {\r\n            x: number;\r\n            y: number;\r\n            z: number;\r\n        }\r\n\r\n        const temp: { v: Vec3, u: Vec2, n: Vec3 }[] = []\r\n\r\n        for (let i = 0; i < this.vertexList.length; i++) {\r\n            const vertice = { x: this.vertexList[i].x, y: this.vertexList[i].y, z: this.vertexList[i].z };\r\n            const uv = { x: this.textureList[i].x, y: this.textureList[i].y };\r\n            const normal = { x: this.normalList[i].x, y: this.normalList[i].y, z: this.normalList[i].z };\r\n\r\n            const data = { v: vertice, u: uv, n: normal };\r\n\r\n            const index = temp.findIndex(d => d === data);\r\n            if (index < 0) {\r\n                this.indices.push(temp.length);\r\n                temp.push(data);\r\n                this.vertices.push(vertice.x, vertice.y, vertice.z);\r\n                this.normals.push(normal.x, normal.y, normal.z);\r\n                this.uvs.push(uv.x, uv.y);\r\n            } else {\r\n                this.indices.push(index);\r\n            }\r\n        }\r\n\r\n        /*faces.forEach(face=>{\r\n            this.vertexList.push(face.vertexA);\r\n            this.vertexList.push(face.vertexB);\r\n            this.vertexList.push(face.vertexC);\r\n        });*/\r\n    }\r\n\r\n    private processLine(line: string) {\r\n        const parts = line.split(' ').filter(c => c !== '');\r\n\r\n        if (parts.length > 0) {\r\n            switch (parts[0]) {\r\n                case \"usemtl\":\r\n                    this.useMtl = parts[1];\r\n                    break;\r\n                case \"mtllib\":\r\n                    this.mtl = parts[1];\r\n                    break;\r\n                case \"v\":\r\n                    const v = new Vertex();\r\n                    v.loadFromStringArray(parts);\r\n                    this.vertexList.push(v);\r\n                    v.Index = this.vertexList.length;\r\n                    break;\r\n                case \"vn\":\r\n                    const n = new Normal();\r\n                    n.loadFromStringArray(parts);\r\n                    this.normalList.push(n);\r\n                    n.Index = this.normalList.length;\r\n                    break;\r\n                case \"f\":\r\n                    const f = new Face();\r\n                    f.loadFromStringArray(parts);\r\n                    f.UseMtl = this.useMtl;\r\n                    this.faceList.push(f);\r\n                    break;\r\n                case \"vt\":\r\n                    const vt = new TextureVertex();\r\n                    vt.loadFromStringArray(parts);\r\n                    this.textureList.push(vt);\r\n                    vt.Index = this.textureList.length;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public facesToVertexIndices() {\r\n        const indices: number[] = [];\r\n\r\n        for (let i = 0; i < this.faceList.length; i++) {\r\n            const face = this.faceList[i];\r\n\r\n            if (face.VertexIndexList.length == 4) {\r\n\r\n                indices.push(face.VertexIndexList[0] - 1);\r\n                indices.push(face.VertexIndexList[1] - 1);\r\n                indices.push(face.VertexIndexList[2] - 1);\r\n\r\n                indices.push(face.VertexIndexList[0] - 1);\r\n                indices.push(face.VertexIndexList[2] - 1);\r\n                indices.push(face.VertexIndexList[3] - 1);\r\n            } else {\r\n                face.VertexIndexList.forEach(v => {\r\n                    indices.push(v - 1);\r\n                });\r\n            }\r\n        }\r\n\r\n        return indices;\r\n    }\r\n\r\n    public facesToNormalIndices() {\r\n        const indices: number[] = [];\r\n\r\n        for (let i = 0; i < this.faceList.length; i++) {\r\n            const face = this.faceList[i];\r\n\r\n            if (face.NormalVertexIndexList.length == 4) {\r\n\r\n                indices.push(face.NormalVertexIndexList[0] - 1);\r\n                indices.push(face.NormalVertexIndexList[1] - 1);\r\n                indices.push(face.NormalVertexIndexList[2] - 1);\r\n\r\n                indices.push(face.NormalVertexIndexList[0] - 1);\r\n                indices.push(face.NormalVertexIndexList[2] - 1);\r\n                indices.push(face.NormalVertexIndexList[3] - 1);\r\n            } else {\r\n                face.NormalVertexIndexList.forEach(v => {\r\n                    indices.push(v - 1);\r\n                });\r\n            }\r\n        }\r\n\r\n        return indices;\r\n    }\r\n\r\n    public facesToTextureIndices() {\r\n        const indices: number[] = [];\r\n\r\n        for (let i = 0; i < this.faceList.length; i++) {\r\n            const face = this.faceList[i];\r\n\r\n            if (face.TextureVertexIndexList.length == 4) {\r\n\r\n                indices.push(face.TextureVertexIndexList[0] - 1);\r\n                indices.push(face.TextureVertexIndexList[1] - 1);\r\n                indices.push(face.TextureVertexIndexList[2] - 1);\r\n\r\n                indices.push(face.TextureVertexIndexList[0] - 1);\r\n                indices.push(face.TextureVertexIndexList[2] - 1);\r\n                indices.push(face.TextureVertexIndexList[3] - 1);\r\n            } else {\r\n                face.TextureVertexIndexList.forEach(v => {\r\n                    indices.push(v - 1);\r\n                });\r\n            }\r\n        }\r\n\r\n        return indices;\r\n    }\r\n\r\n    public vertexListToVertices() {\r\n        const vertices: number[] = [];\r\n\r\n        this.vertexList.forEach(v => vertices.push(v.x, v.y, v.z));\r\n\r\n        return vertices;\r\n    }\r\n\r\n    public vertexTexturesListToUvs() {\r\n        const vertices: number[] = [];\r\n\r\n        this.textureList.forEach(v => vertices.push(v.x, v.y));\r\n\r\n        return vertices;\r\n    }\r\n\r\n    public vertexNormalsToNormals() {\r\n        const vertices: number[] = [];\r\n\r\n        this.normalList.forEach(v => vertices.push(v.x, v.y, v.z));\r\n\r\n        return vertices;\r\n    }\r\n}","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2\n *\n * @param {ReadonlyMat2} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2\n *\n * @param {ReadonlyMat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {ReadonlyMat2} L the lower triangular matrix\n * @param {ReadonlyMat2} D the diagonal matrix\n * @param {ReadonlyMat2} U the upper triangular matrix\n * @param {ReadonlyMat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 2x3 Matrix\n * @module mat2d\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, b,\n *  c, d,\n *  tx, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, b, 0,\n *  c, d, 0,\n *  tx, ty, 1]\n * </pre>\n * The last column is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2d} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat2d} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2d\n *\n * @param {ReadonlyMat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q a normalized quaternion\n * @param {ReadonlyVec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Creates a dual quat from a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyVec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {ReadonlyMat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} real part\n */\n\nexport var getReal = quat.copy;\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} dual part\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\n\nexport var setReal = quat.copy;\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {quat2} out\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @returns {quat2} out\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n * @function\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = quat.dot;\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Calculates the length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\n\nexport var length = quat.length;\n/**\n * Alias for {@link quat2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat2} a the first dual quaternion.\n * @param {ReadonlyQuat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat2} a the first dual quat.\n * @param {ReadonlyQuat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","export function isPowerOf2(value:number) {\r\n    return (value & (value - 1)) == 0;\r\n}","import { gl } from \".\";\r\nimport { isPowerOf2 } from \"./MathUtilities\";\r\n\r\nexport class Texture {\r\n    public readonly texture: WebGLTexture;\r\n\r\n    public constructor(imageUrl: string, flipTexture = true) {\r\n        this.texture = gl.createTexture();\r\n        this.bind();\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255]));\r\n        const image = new Image();\r\n        image.onload = () => {\r\n            this.bind();\r\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipTexture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n\r\n            if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\r\n                gl.generateMipmap(gl.TEXTURE_2D);\r\n            } else {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n            }\r\n            this.unbind();\r\n        };\r\n        image.src = imageUrl;\r\n    }\r\n\r\n    public bind() {\r\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    }\r\n\r\n    public unbind() {\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n\r\n    public activate(textureIndex = 0) {\r\n        gl.activeTexture(gl.TEXTURE0 + textureIndex);\r\n        this.bind();\r\n    }\r\n\r\n    public delete() {\r\n        gl.deleteTexture(this.texture);\r\n    }\r\n}","import { ShaderProgram } from \"./ShaderProgram\";\r\nimport { BufferObject } from \"./BufferObject\";\r\nimport { Obj } from \"./OBJLoader/Obj\";\r\nimport { ReadonlyVec3, mat4 } from \"gl-matrix\";\r\nimport { Texture } from \"./Texture\";\r\n\r\nexport let gl: WebGL2RenderingContext;\r\n\r\n(() => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n    gl = canvas.getContext(\"webgl2\");\r\n\r\n    document.body.appendChild(canvas);\r\n\r\n    const program = new ShaderProgram(\"resources/shaders/simple.vs\", \"resources/shaders/simple.fs\");\r\n\r\n    const fishObj = new Obj();\r\n    fishObj.loadObjFile(\"resources/models/fish.obj\");\r\n\r\n    const vertexData = fishObj.vertices;\r\n\r\n    const uvs = fishObj.uvs;\r\n\r\n    const indices = fishObj.indices;\r\n\r\n    const normals = fishObj.normals;\r\n\r\n    const texture = new Texture(\"resources/images/fish_texture.png\");\r\n\r\n    const vertexBuffer = new BufferObject(gl.ARRAY_BUFFER).setData(new Float32Array(vertexData), gl.STATIC_DRAW);\r\n    const uvsBuffer = new BufferObject(gl.ARRAY_BUFFER).setData(new Float32Array(uvs), gl.STATIC_DRAW);\r\n    const indicesBuffer = new BufferObject(gl.ELEMENT_ARRAY_BUFFER).setData(new Int32Array(indices), gl.STATIC_DRAW);\r\n    const normalsBuffer = new BufferObject(gl.ARRAY_BUFFER).setData(new Float32Array(normals), gl.STATIC_DRAW);\r\n\r\n    const delta = 60 / 1000;\r\n\r\n    const projectionMatrix = mat4.create();\r\n    mat4.perspective(projectionMatrix, 60 * (Math.PI / 180), canvas.clientWidth / canvas.clientHeight, 0.1, 100);\r\n\r\n    program.setMatrix4fv(\"projectionMatrix\", projectionMatrix);\r\n\r\n    let position = [0, 0, -10];\r\n\r\n    const startPosition = position;\r\n\r\n    let rotation = [0, 0, 0];\r\n\r\n    const startTime = Date.now();\r\n\r\n    setInterval(() => {\r\n\r\n        const timeSinceStart = (Date.now() - startTime) / 1000;\r\n\r\n        position = startPosition;\r\n        position[1] += (Math.sin(timeSinceStart) * (Math.PI/180)) * 1.2;\r\n\r\n        rotation[1] += 45 * delta;\r\n\r\n        const modelMatrix = mat4.create();\r\n        mat4.translate(modelMatrix, modelMatrix, new Float32Array(position));\r\n\r\n        mat4.rotateX(modelMatrix, modelMatrix, rotation[0] * (Math.PI / 180));\r\n        mat4.rotateY(modelMatrix, modelMatrix, rotation[1] * (Math.PI / 180));\r\n        mat4.rotateZ(modelMatrix, modelMatrix, rotation[2] * (Math.PI / 180));\r\n\r\n        program.setMatrix4fv(\"modelMatrix\", modelMatrix);\r\n\r\n        program.setFloat(\"time\", timeSinceStart);\r\n\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.clearColor(0, 0, 0, 1);\r\n        gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);\r\n\r\n        program.use();\r\n\r\n        vertexBuffer.bind();\r\n        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 0, 0);\r\n        gl.enableVertexAttribArray(0);\r\n\r\n        uvsBuffer.bind();\r\n        gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);\r\n        gl.enableVertexAttribArray(1);\r\n\r\n        normalsBuffer.bind();\r\n        gl.vertexAttribPointer(2, 3, gl.FLOAT, false, 0, 0);\r\n        gl.enableVertexAttribArray(2);\r\n\r\n        texture.activate();\r\n\r\n        indicesBuffer.bind();\r\n\r\n        gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_INT, 0);\r\n\r\n\r\n\r\n    }, 1000 / 60);\r\n\r\n    addEventListener(\"close\", () => {\r\n        program.delete();\r\n        vertexBuffer.delete();\r\n        indicesBuffer.delete();\r\n        uvsBuffer.delete();\r\n        normalsBuffer.delete();\r\n        texture.delete();\r\n    });\r\n})();"]}